services:
  swagger-gen:
    image: golang:1.24-alpine
    working_dir: /backend
    volumes:
      - ./backend:/backend
      - ./swagger:/swagger
    entrypoint: 
      sh -c "
      apk add --no-cache git &&
      go install github.com/swaggo/swag/cmd/swag@latest &&
      swag init -g src/main.go -o /swagger
      "
    restart: "no"
  backend:
    build:
      context: ./backend
    working_dir: /app
    command: ./backend
    ports:
      - "8080:8080"
    networks:
      - app-network
    profiles:
      - "backend"
    environment:
      DB_HOST: mysql
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      DB_NAME: ${DB_NAME}
      IS_DOCKER: 1
      LIVEKIT_API_SECRET: ${LIVEKIT_API_SECRET}
      LIVEKIT_API_KEY: ${LIVEKIT_API_KEY}
      USE_ORM: true
      JWT_SIGNING_KEY: ${JWT_SIGNING_KEY}
      CENTRIFUGO_HTTP_API_KEY: ${CENTRIFUGO_HTTP_API_KEY}
    depends_on:
      mysql: 
        condition: service_started
      db-migrate:
        condition: service_completed_successfully
      centrifugo:
        condition: service_started
      livekit:
        condition: service_started
      # asyncapi-ui:
      #   condition: service_started
    volumes:
      - ./backend/avatars:/app/avatars

  mysql:
    image: mariadb:lts
    networks:
      - app-network
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ./backend/db/mysql-data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mariadb-admin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 5s
      retries: 5

  sqlc:
    image: sqlc/sqlc
    volumes:
      - ./backend:/backend
    working_dir: /backend
    command: ["generate"]

  db-migrate:
      image: gomicro/goose
      networks:
        - app-network
      depends_on: 
        mysql:
          condition: service_healthy
      environment:
        GOOSE_DRIVER: mysql
        GOOSE_DBSTRING: root:${DB_ROOT_PASSWORD}@tcp(mysql:3306)/${DB_NAME}
      volumes:
        - ./backend/db/migrations/schema:/migrations/schema
        - ./backend/db/migrations/behaviour:/migrations/behaviour
      command: >
        sh -c "
          mkdir -p /migrations/merged_migrations &&
          cp -r /migrations/schema/* /migrations/merged_migrations/ &&
          cp -r /migrations/behaviour/* /migrations/merged_migrations/ &&          
          goose --dir /migrations/merged_migrations ${MIGRATION_DIRECTION:-up} ${MIGRATION_VERSION}
        "

  centrifugo:
    environment:
      - CENTRIFUGO_ADMIN_PASSWORD=${CENTRIFUGO_ADMIN_PASSWORD}
      - CENTRIFUGO_ADMIN_SECRET=${CENTRIFUGO_ADMIN_SECRET}
      - CENTRIFUGO_CLIENT_TOKEN_HMAC_SECRET_KEY=${JWT_SIGNING_KEY}
      - CENTRIFUGO_HTTP_API_KEY=${CENTRIFUGO_HTTP_API_KEY}
    container_name: centrifugo
    image: centrifugo/centrifugo:v6
    volumes:
      - ./backend/centrifugo:/centrifugo
    command: centrifugo -c config.json
    ports:
      - 8000:8000
    ulimits:
      nofile:
        soft: 65535
        hard: 65535
    networks:
    - app-network

  livekit:
    image: livekit/livekit-server:latest
    container_name: livekit
    environment:
      LIVEKIT_KEYS: "${LIVEKIT_API_KEY}: ${LIVEKIT_API_SECRET}"
    ports:
      - "7880:7880"   
      - "7881:7881"   
    volumes:
      - ./backend/livekit/config.yaml:/etc/livekit/config.yaml:ro
    networks:
      - app-network
    depends_on: 
      mysql:
        condition: service_healthy

  frontend-build:
    build:
      context: ./frontend
      dockerfile: dockerfile
    volumes:
      - ./frontend/dist:/dist
    command: ["sh", "-c", "cp /temp_dist/* /dist"]

  swagger:
    image: swaggerapi/swagger-ui:latest
    container_name: swagger-ui
    depends_on:
      swagger-gen:
        condition: service_completed_successfully
    environment:
      SWAGGER_JSON: /swagger/swagger.yaml
    volumes:
      - ./swagger:/swagger:ro
    ports:
      - "8001:8080"
    networks:
      - app-network

  asyncapi-ui:
    image: asyncapi/cli
    ports:
      - "9001:9001"
    volumes:
      - ./asyncapi/asyncapi.yaml:/app/asyncapi/asyncapi.yaml
    command: [start, studio, /app/asyncapi/asyncapi.yaml, --port=9001]
    networks:
      - app-network

  # asyncapi-generate:
  #   image: ghcr.io/spiral/asyncapi-go-template
  #   volumes:
  #     - ./asyncapi:/app/asyncapi:rw
  #     - ./backend/src/pkg/events:/app/output:rw
  #   command: ["/app/asyncapi/asyncapi.yaml", "@spiral/asyncapi-go-template", "-o", "/app/output", "-p", "packageName=events", "--force-write"]
  #   networks:
  #     - app-network

networks:
  app-network:
    driver: bridge

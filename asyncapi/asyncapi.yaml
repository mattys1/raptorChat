asyncapi: 3.0.0
info:
  title: RaptorChat Real-Time API
  version: 1.0.0
servers:
  development:
    host: 'localhost:8080'
    protocol: ws
channels:
  room.{id}:
    address: 'room:{id}'
    messages:
      MessageSent:
        $ref: '#/components/messages/MessageSentEvent'
    description: Events for a single chat room
    parameters:
      id:
        description: Identifier of the chatroom

  user.{id}.invites:
    address: user:{id}:invites
    parameters:
      id:
        description: Id of the user.
    messages:
      InviteReceived:
        $ref: '#/components/messages/InviteReceivedEvent'
    description: Events for the invites of a user
        
operations:
  'room.{id}.receive':
    action: receive
    channel:
      $ref: '#/channels/room.{id}'
    summary: Publish room‚Äêlevel events
    messages:
      - $ref: '#/channels/room.{id}/messages/MessageSent'
  'user.{id}.invites.receive':
    action: receive
    channel:
      $ref: '#/channels/user.{id}.invites'
    summary: Publish user invite events
    messages:
      - $ref: '#/channels/user.{id}.invites/messages/InviteReceived'
components:
  schemas:
    EventResourceBase:
      type: object
      properties:
        channel:
          type: string
          description: event channel
        method:
          enum: ["POST", "PUT", "GET", "DELETE"]
          description: action method, follow http conventions
        event_name:
          type: string
          description: name of the event
        contents:
          description: 'event payload, varies by event_name'
      required:
        - channel
        - method
        - event_name
        - contents
    Message:
      type: object
      properties:
        id:
          type: string
        content:
          type: string
        sender_id:
          type: string
        timestamp:
          type: string
          format: date-time
      required:
        - id
        - content
        - sender_id
    User:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        display_name:
          type: string
      required:
        - id
        - username

    InvitesType:
      type: string
      enum:
        - direct
        - group

    InvitesState:
      type: string
      enum:
        - pending
        - accepted
        - declined

    Invite:
      type: object
      properties:
        id:
          type: integer
        type:
          $ref: '#/components/schemas/InvitesType'
        state:
          $ref: '#/components/schemas/InvitesState'
        room_id:
          type: integer
          nullable: true
        issuer_id:
          type: integer
        receiver_id:
          type: integer
      required:
        - id
        - type
        - state
        - issuer_id
        - receiver_id

    RoomsType:
      type: string
      enum:
        - direct
        - group

    Room:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          nullable: true
        owner_id:
          type: integer
          nullable: true
        type:
          $ref: '#/components/schemas/RoomsType'
      required:
        - id
        - type

    Permission:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
      required:
        - id
        - name

    Role:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
      required:
        - id
        - name

    RolesPermission:
      type: object
      properties:
        role_id:
          type: integer
        permission_id:
          type: integer
      required:
        - role_id
        - permission_id

    UsersRole:
      type: object
      properties:
        user_id:
          type: integer
        role_id:
          type: integer
      required:
        - user_id
        - role_id

    UsersRoom:
      type: object
      properties:
        user_id:
          type: integer
        room_id:
          type: integer
      required:
        - user_id
        - room_id

  messages:
    MessageSentEvent:
      name: MessageSentEvent
      title: Message Sent Event
      payload:
        allOf:
          - $ref: '#/components/schemas/EventResourceBase'
          - type: object
            properties:
              event_name:
                enum:
                  - message_sent
              contents:
                $ref: '#/components/schemas/Message'
            required:
              - event_name
              - contents
    InviteReceivedEvent:
      name: InviteReceivedEvent
      title: Invite Received Event
      payload:
        allOf:
          - $ref: '#/components/schemas/EventResourceBase'
          - type: object
            properties:
              event_name:
                enum:
                  - invite_received
              contents:
                $ref: '#/components/schemas/Invite'
            required:
              - event_name
              - contents

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const addUserToRoom = `-- name: AddUserToRoom :exec
INSERT INTO users_rooms (user_id, room_id) VALUES (?, ?)
`

type AddUserToRoomParams struct {
	UserID uint64 `json:"user_id"`
	RoomID uint64 `json:"room_id"`
}

func (q *Queries) AddUserToRoom(ctx context.Context, arg AddUserToRoomParams) error {
	_, err := q.db.ExecContext(ctx, addUserToRoom, arg.UserID, arg.RoomID)
	return err
}

const assignPermissionToRole = `-- name: AssignPermissionToRole :exec
INSERT INTO roles_permissions (role_id, permission_id) VALUES (?, ?)
`

type AssignPermissionToRoleParams struct {
	RoleID       uint64 `json:"role_id"`
	PermissionID uint64 `json:"permission_id"`
}

func (q *Queries) AssignPermissionToRole(ctx context.Context, arg AssignPermissionToRoleParams) error {
	_, err := q.db.ExecContext(ctx, assignPermissionToRole, arg.RoleID, arg.PermissionID)
	return err
}

const assignRoleToUser = `-- name: AssignRoleToUser :exec
INSERT INTO users_roles (user_id, role_id) VALUES (?, ?)
`

type AssignRoleToUserParams struct {
	UserID uint64 `json:"user_id"`
	RoleID uint64 `json:"role_id"`
}

func (q *Queries) AssignRoleToUser(ctx context.Context, arg AssignRoleToUserParams) error {
	_, err := q.db.ExecContext(ctx, assignRoleToUser, arg.UserID, arg.RoleID)
	return err
}

const assignRoleToUserInRoom = `-- name: AssignRoleToUserInRoom :exec
INSERT INTO rooms_users_roles (room_id, user_id, role_id)
VALUES (?, ?, ?)
`

type AssignRoleToUserInRoomParams struct {
	RoomID uint64 `json:"room_id"`
	UserID uint64 `json:"user_id"`
	RoleID uint64 `json:"role_id"`
}

func (q *Queries) AssignRoleToUserInRoom(ctx context.Context, arg AssignRoleToUserInRoomParams) error {
	_, err := q.db.ExecContext(ctx, assignRoleToUserInRoom, arg.RoomID, arg.UserID, arg.RoleID)
	return err
}

const createFriendship = `-- name: CreateFriendship :execresult
INSERT INTO friendships (first_id, second_id, dm_id) VALUES (?, ?, ?)
`

type CreateFriendshipParams struct {
	FirstID  uint64 `json:"first_id"`
	SecondID uint64 `json:"second_id"`
	DmID     uint64 `json:"dm_id"`
}

func (q *Queries) CreateFriendship(ctx context.Context, arg CreateFriendshipParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createFriendship, arg.FirstID, arg.SecondID, arg.DmID)
}

const createMessage = `-- name: CreateMessage :execresult
INSERT INTO messages (room_id, sender_id, contents) VALUES (?, ?, ?)
`

type CreateMessageParams struct {
	RoomID   uint64 `json:"room_id"`
	SenderID uint64 `json:"sender_id"`
	Contents string `json:"contents"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createMessage, arg.RoomID, arg.SenderID, arg.Contents)
}

const createRoom = `-- name: CreateRoom :execresult
INSERT INTO rooms (name, owner_id, type) VALUES (?, ?, ?)
`

type CreateRoomParams struct {
	Name    *string   `json:"name"`
	OwnerID *uint64   `json:"owner_id"`
	Type    RoomsType `json:"type"`
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createRoom, arg.Name, arg.OwnerID, arg.Type)
}

const deleteFriendship = `-- name: DeleteFriendship :exec
DELETE FROM friendships WHERE id = ?
`

func (q *Queries) DeleteFriendship(ctx context.Context, id uint64) error {
	_, err := q.db.ExecContext(ctx, deleteFriendship, id)
	return err
}

const deleteMessage = `-- name: DeleteMessage :exec
UPDATE messages SET is_deleted = TRUE WHERE id = ?
`

func (q *Queries) DeleteMessage(ctx context.Context, id uint64) error {
	_, err := q.db.ExecContext(ctx, deleteMessage, id)
	return err
}

const deleteRoom = `-- name: DeleteRoom :exec
DELETE FROM rooms WHERE id = ?
`

func (q *Queries) DeleteRoom(ctx context.Context, id uint64) error {
	_, err := q.db.ExecContext(ctx, deleteRoom, id)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id uint64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getAllRooms = `-- name: GetAllRooms :many
SELECT id, name, owner_id, type, member_count FROM rooms
`

func (q *Queries) GetAllRooms(ctx context.Context) ([]Room, error) {
	rows, err := q.db.QueryContext(ctx, getAllRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OwnerID,
			&i.Type,
			&i.MemberCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, username, email, created_at, password, avatar_url FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.CreatedAt,
			&i.Password,
			&i.AvatarUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCountOfRoom = `-- name: GetCountOfRoom :one
SELECT member_count FROM rooms WHERE id = ?
`

func (q *Queries) GetCountOfRoom(ctx context.Context, id uint64) (*int32, error) {
	row := q.db.QueryRowContext(ctx, getCountOfRoom, id)
	var member_count *int32
	err := row.Scan(&member_count)
	return member_count, err
}

const getFriendsOfUser = `-- name: GetFriendsOfUser :many
SELECT DISTINCT u.id, u.username, u.email, u.created_at, u.password, u.avatar_url FROM users u 
NATURAL JOIN friendships f
WHERE ? OR f.second_id = ?
`

type GetFriendsOfUserParams struct {
	UserID uint64 `json:"user_id"`
}

func (q *Queries) GetFriendsOfUser(ctx context.Context, arg GetFriendsOfUserParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getFriendsOfUser, arg.UserID, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.CreatedAt,
			&i.Password,
			&i.AvatarUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessageById = `-- name: GetMessageById :one
SELECT id, sender_id, room_id, contents, created_at, is_deleted, deleted_at FROM messages WHERE id = ?
`

func (q *Queries) GetMessageById(ctx context.Context, id uint64) (Message, error) {
	row := q.db.QueryRowContext(ctx, getMessageById, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.SenderID,
		&i.RoomID,
		&i.Contents,
		&i.CreatedAt,
		&i.IsDeleted,
		&i.DeletedAt,
	)
	return i, err
}

const getMessagesByRoom = `-- name: GetMessagesByRoom :many
SELECT id, sender_id, room_id, contents, created_at, is_deleted, deleted_at FROM messages WHERE room_id = ?
`

func (q *Queries) GetMessagesByRoom(ctx context.Context, roomID uint64) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesByRoom, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.SenderID,
			&i.RoomID,
			&i.Contents,
			&i.CreatedAt,
			&i.IsDeleted,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPermissions = `-- name: GetPermissions :many
SELECT id, name FROM permissions
`

func (q *Queries) GetPermissions(ctx context.Context) ([]Permission, error) {
	rows, err := q.db.QueryContext(ctx, getPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPermissionsByRole = `-- name: GetPermissionsByRole :many
SELECT p.id, p.name
FROM permissions p
JOIN roles_permissions rp ON p.id = rp.permission_id
WHERE rp.role_id = ?
`

func (q *Queries) GetPermissionsByRole(ctx context.Context, roleID uint64) ([]Permission, error) {
	rows, err := q.db.QueryContext(ctx, getPermissionsByRole, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPermissionsByUser = `-- name: GetPermissionsByUser :many
SELECT DISTINCT p.id, p.name
FROM permissions p
JOIN roles_permissions rp ON p.id = rp.permission_id
JOIN users_roles ur ON ur.role_id = rp.role_id
WHERE ur.user_id = ?
`

func (q *Queries) GetPermissionsByUser(ctx context.Context, userID uint64) ([]Permission, error) {
	rows, err := q.db.QueryContext(ctx, getPermissionsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoleByName = `-- name: GetRoleByName :one
SELECT id, name FROM roles WHERE name = ? LIMIT 1
`

func (q *Queries) GetRoleByName(ctx context.Context, name string) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRoleByName, name)
	var i Role
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getRolesByUser = `-- name: GetRolesByUser :many
SELECT r.id, r.name
FROM roles r
JOIN users_roles ur ON r.id = ur.role_id
WHERE ur.user_id = ?
`

func (q *Queries) GetRolesByUser(ctx context.Context, userID uint64) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, getRolesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRolesByUserInRoom = `-- name: GetRolesByUserInRoom :many
SELECT r.id, r.name
FROM   roles r
JOIN   rooms_users_roles rur ON rur.role_id = r.id
WHERE  rur.user_id = ? AND rur.room_id = ?
`

type GetRolesByUserInRoomParams struct {
	UserID uint64 `json:"user_id"`
	RoomID uint64 `json:"room_id"`
}

func (q *Queries) GetRolesByUserInRoom(ctx context.Context, arg GetRolesByUserInRoomParams) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, getRolesByUserInRoom, arg.UserID, arg.RoomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoomById = `-- name: GetRoomById :one
SELECT id, name, owner_id, type, member_count FROM rooms WHERE id = ?
`

func (q *Queries) GetRoomById(ctx context.Context, id uint64) (Room, error) {
	row := q.db.QueryRowContext(ctx, getRoomById, id)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.Type,
		&i.MemberCount,
	)
	return i, err
}

const getRoomsByUser = `-- name: GetRoomsByUser :many
SELECT r.id, r.name, r.owner_id, r.type, r.member_count FROM rooms r
JOIN users_rooms ur ON ur.room_id = r.id
WHERE ur.user_id = ?
`

func (q *Queries) GetRoomsByUser(ctx context.Context, userID uint64) ([]Room, error) {
	rows, err := q.db.QueryContext(ctx, getRoomsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OwnerID,
			&i.Type,
			&i.MemberCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, email, created_at, password, avatar_url FROM users WHERE id = ?
`

func (q *Queries) GetUserById(ctx context.Context, id uint64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.Password,
		&i.AvatarUrl,
	)
	return i, err
}

const getUsersByRoom = `-- name: GetUsersByRoom :many
SELECT u.id, u.username, u.email, u.created_at, u.password, u.avatar_url FROM users u
JOIN users_rooms ur ON ur.user_id = u.id
WHERE ur.room_id = ?
`

func (q *Queries) GetUsersByRoom(ctx context.Context, roomID uint64) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsersByRoom, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.CreatedAt,
			&i.Password,
			&i.AvatarUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removePermissionFromRole = `-- name: RemovePermissionFromRole :exec
DELETE FROM roles_permissions WHERE role_id = ? AND permission_id = ?
`

type RemovePermissionFromRoleParams struct {
	RoleID       uint64 `json:"role_id"`
	PermissionID uint64 `json:"permission_id"`
}

func (q *Queries) RemovePermissionFromRole(ctx context.Context, arg RemovePermissionFromRoleParams) error {
	_, err := q.db.ExecContext(ctx, removePermissionFromRole, arg.RoleID, arg.PermissionID)
	return err
}

const removeRoleFromUser = `-- name: RemoveRoleFromUser :exec
DELETE FROM users_roles WHERE user_id = ? AND role_id = ?
`

type RemoveRoleFromUserParams struct {
	UserID uint64 `json:"user_id"`
	RoleID uint64 `json:"role_id"`
}

func (q *Queries) RemoveRoleFromUser(ctx context.Context, arg RemoveRoleFromUserParams) error {
	_, err := q.db.ExecContext(ctx, removeRoleFromUser, arg.UserID, arg.RoleID)
	return err
}

const removeRoleFromUserInRoom = `-- name: RemoveRoleFromUserInRoom :exec
DELETE FROM rooms_users_roles
WHERE room_id = ? AND user_id = ? AND role_id = ?
`

type RemoveRoleFromUserInRoomParams struct {
	RoomID uint64 `json:"room_id"`
	UserID uint64 `json:"user_id"`
	RoleID uint64 `json:"role_id"`
}

func (q *Queries) RemoveRoleFromUserInRoom(ctx context.Context, arg RemoveRoleFromUserInRoomParams) error {
	_, err := q.db.ExecContext(ctx, removeRoleFromUserInRoom, arg.RoomID, arg.UserID, arg.RoleID)
	return err
}

const updateRoom = `-- name: UpdateRoom :exec
UPDATE rooms SET name = ?, type = ?, owner_id = ? WHERE id = ?
`

type UpdateRoomParams struct {
	Name    *string   `json:"name"`
	Type    RoomsType `json:"type"`
	OwnerID *uint64   `json:"owner_id"`
	ID      uint64    `json:"id"`
}

func (q *Queries) UpdateRoom(ctx context.Context, arg UpdateRoomParams) error {
	_, err := q.db.ExecContext(ctx, updateRoom,
		arg.Name,
		arg.Type,
		arg.OwnerID,
		arg.ID,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET username = ?, email = ?, password = ? WHERE id = ?
`

type UpdateUserParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
	ID       uint64 `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Username,
		arg.Email,
		arg.Password,
		arg.ID,
	)
	return err
}

const updateUserAvatar = `-- name: UpdateUserAvatar :exec
UPDATE users
SET avatar_url = ?
WHERE id = ?
`

type UpdateUserAvatarParams struct {
	AvatarUrl string `json:"avatar_url"`
	ID        uint64 `json:"id"`
}

func (q *Queries) UpdateUserAvatar(ctx context.Context, arg UpdateUserAvatarParams) error {
	_, err := q.db.ExecContext(ctx, updateUserAvatar, arg.AvatarUrl, arg.ID)
	return err
}

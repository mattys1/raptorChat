// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const assignPermissionToRole = `-- name: AssignPermissionToRole :exec
INSERT INTO roles_permissions (role_id, permission_id) VALUES (?, ?)
`

type AssignPermissionToRoleParams struct {
	RoleID       uint64 `json:"role_id"`
	PermissionID uint64 `json:"permission_id"`
}

func (q *Queries) AssignPermissionToRole(ctx context.Context, arg AssignPermissionToRoleParams) error {
	_, err := q.db.ExecContext(ctx, assignPermissionToRole, arg.RoleID, arg.PermissionID)
	return err
}

const assignRoleToUser = `-- name: AssignRoleToUser :exec
INSERT INTO users_roles (user_id, role_id) VALUES (?, ?)
`

type AssignRoleToUserParams struct {
	UserID uint64 `json:"user_id"`
	RoleID uint64 `json:"role_id"`
}

func (q *Queries) AssignRoleToUser(ctx context.Context, arg AssignRoleToUserParams) error {
	_, err := q.db.ExecContext(ctx, assignRoleToUser, arg.UserID, arg.RoleID)
	return err
}

const createMessage = `-- name: CreateMessage :execresult
INSERT INTO messages (room_id, sender_id, contents) VALUES (?, ?, ?)
`

type CreateMessageParams struct {
	RoomID   uint64 `json:"room_id"`
	SenderID uint64 `json:"sender_id"`
	Contents string `json:"contents"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createMessage, arg.RoomID, arg.SenderID, arg.Contents)
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (username, email, password, created_at)
VALUES (?, ?, ?, NOW())
`

type CreateUserParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Username, arg.Email, arg.Password)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id uint64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getAllRooms = `-- name: GetAllRooms :many
SELECT id, name FROM rooms
`

func (q *Queries) GetAllRooms(ctx context.Context) ([]Room, error) {
	rows, err := q.db.QueryContext(ctx, getAllRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, username, email, created_at, password FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.CreatedAt,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessagesByRoom = `-- name: GetMessagesByRoom :many
SELECT id, sender_id, room_id, contents, created_at FROM messages WHERE room_id = ?
`

func (q *Queries) GetMessagesByRoom(ctx context.Context, roomID uint64) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesByRoom, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.SenderID,
			&i.RoomID,
			&i.Contents,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPermissions = `-- name: GetPermissions :many
SELECT id, name FROM permissions
`

func (q *Queries) GetPermissions(ctx context.Context) ([]Permission, error) {
	rows, err := q.db.QueryContext(ctx, getPermissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPermissionsByRole = `-- name: GetPermissionsByRole :many
SELECT p.id, p.name
FROM permissions p
JOIN roles_permissions rp ON p.id = rp.permission_id
WHERE rp.role_id = ?
`

func (q *Queries) GetPermissionsByRole(ctx context.Context, roleID uint64) ([]Permission, error) {
	rows, err := q.db.QueryContext(ctx, getPermissionsByRole, roleID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPermissionsByUser = `-- name: GetPermissionsByUser :many
SELECT DISTINCT p.id, p.name
FROM permissions p
JOIN roles_permissions rp ON p.id = rp.permission_id
JOIN users_roles ur ON ur.role_id = rp.role_id
WHERE ur.user_id = ?
`

func (q *Queries) GetPermissionsByUser(ctx context.Context, userID uint64) ([]Permission, error) {
	rows, err := q.db.QueryContext(ctx, getPermissionsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Permission
	for rows.Next() {
		var i Permission
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoles = `-- name: GetRoles :many
SELECT id, name FROM roles
`

func (q *Queries) GetRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, getRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRolesByUser = `-- name: GetRolesByUser :many
SELECT r.id, r.name
FROM roles r
JOIN users_roles ur ON r.id = ur.role_id
WHERE ur.user_id = ?
`

func (q *Queries) GetRolesByUser(ctx context.Context, userID uint64) ([]Role, error) {
	rows, err := q.db.QueryContext(ctx, getRolesByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoomsByUser = `-- name: GetRoomsByUser :many
SELECT r.id, r.name FROM rooms r
JOIN users_rooms ur ON ur.room_id = r.id
WHERE ur.user_id = ?
`

func (q *Queries) GetRoomsByUser(ctx context.Context, userID uint64) ([]Room, error) {
	rows, err := q.db.QueryContext(ctx, getRoomsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, created_at, password FROM users WHERE email = ? LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.Password,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, email, created_at, password FROM users WHERE id = ?
`

func (q *Queries) GetUserById(ctx context.Context, id uint64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.Password,
	)
	return i, err
}

const getUsersByRoom = `-- name: GetUsersByRoom :many
SELECT u.id, u.username, u.email, u.created_at, u.password FROM users u
JOIN users_rooms ur ON ur.user_id = u.id
WHERE ur.room_id = ?
`

func (q *Queries) GetUsersByRoom(ctx context.Context, roomID uint64) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsersByRoom, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.CreatedAt,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removePermissionFromRole = `-- name: RemovePermissionFromRole :exec
DELETE FROM roles_permissions WHERE role_id = ? AND permission_id = ?
`

type RemovePermissionFromRoleParams struct {
	RoleID       uint64 `json:"role_id"`
	PermissionID uint64 `json:"permission_id"`
}

func (q *Queries) RemovePermissionFromRole(ctx context.Context, arg RemovePermissionFromRoleParams) error {
	_, err := q.db.ExecContext(ctx, removePermissionFromRole, arg.RoleID, arg.PermissionID)
	return err
}

const removeRoleFromUser = `-- name: RemoveRoleFromUser :exec
DELETE FROM users_roles WHERE user_id = ? AND role_id = ?
`

type RemoveRoleFromUserParams struct {
	UserID uint64 `json:"user_id"`
	RoleID uint64 `json:"role_id"`
}

func (q *Queries) RemoveRoleFromUser(ctx context.Context, arg RemoveRoleFromUserParams) error {
	_, err := q.db.ExecContext(ctx, removeRoleFromUser, arg.UserID, arg.RoleID)
	return err
}

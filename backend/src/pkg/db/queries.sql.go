// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const addUserToRoom = `-- name: AddUserToRoom :exec
INSERT INTO users_rooms (user_id, room_id) VALUES (?, ?)
`

type AddUserToRoomParams struct {
	UserID uint64 `json:"user_id"`
	RoomID uint64 `json:"room_id"`
}

func (q *Queries) AddUserToRoom(ctx context.Context, arg AddUserToRoomParams) error {
	_, err := q.db.ExecContext(ctx, addUserToRoom, arg.UserID, arg.RoomID)
	return err
}

const createInvite = `-- name: CreateInvite :execresult
INSERT INTO invites (issuer_id, receiver_id, room_id, type, state) VALUES (?, ?, ?, ?, ?)
`

type CreateInviteParams struct {
	IssuerID   uint64       `json:"issuer_id"`
	ReceiverID uint64       `json:"receiver_id"`
	RoomID     *uint64      `json:"room_id"`
	Type       InvitesType  `json:"type"`
	State      InvitesState `json:"state"`
}

func (q *Queries) CreateInvite(ctx context.Context, arg CreateInviteParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createInvite,
		arg.IssuerID,
		arg.ReceiverID,
		arg.RoomID,
		arg.Type,
		arg.State,
	)
}

const createMessage = `-- name: CreateMessage :execresult
INSERT INTO messages (room_id, sender_id, contents) VALUES (?, ?, ?)
`

type CreateMessageParams struct {
	RoomID   uint64 `json:"room_id"`
	SenderID uint64 `json:"sender_id"`
	Contents string `json:"contents"`
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createMessage, arg.RoomID, arg.SenderID, arg.Contents)
}

const createRoom = `-- name: CreateRoom :execresult
INSERT INTO rooms (name, owner_id, type) VALUES (?, ?, ?)
`

type CreateRoomParams struct {
	Name    *string   `json:"name"`
	OwnerID *uint64   `json:"owner_id"`
	Type    RoomsType `json:"type"`
}

func (q *Queries) CreateRoom(ctx context.Context, arg CreateRoomParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createRoom, arg.Name, arg.OwnerID, arg.Type)
}

const createUser = `-- name: CreateUser :exec
INSERT INTO users (username, email, password, created_at)
VALUES (?, ?, ?, NOW())
`

type CreateUserParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser, arg.Username, arg.Email, arg.Password)
	return err
}

const getAllRooms = `-- name: GetAllRooms :many
SELECT id, name, owner_id, type FROM rooms
`

func (q *Queries) GetAllRooms(ctx context.Context) ([]Room, error) {
	rows, err := q.db.QueryContext(ctx, getAllRooms)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OwnerID,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, username, email, created_at, password FROM users
`

func (q *Queries) GetAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.CreatedAt,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInviteById = `-- name: GetInviteById :one
SELECT id, type, state, room_id, issuer_id, receiver_id FROM invites WHERE id = ?
`

func (q *Queries) GetInviteById(ctx context.Context, id uint64) (Invite, error) {
	row := q.db.QueryRowContext(ctx, getInviteById, id)
	var i Invite
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.State,
		&i.RoomID,
		&i.IssuerID,
		&i.ReceiverID,
	)
	return i, err
}

const getInvitesToUser = `-- name: GetInvitesToUser :many
SELECT id, type, state, room_id, issuer_id, receiver_id FROM invites i WHERE i.receiver_id = ?
`

func (q *Queries) GetInvitesToUser(ctx context.Context, receiverID uint64) ([]Invite, error) {
	rows, err := q.db.QueryContext(ctx, getInvitesToUser, receiverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Invite
	for rows.Next() {
		var i Invite
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.State,
			&i.RoomID,
			&i.IssuerID,
			&i.ReceiverID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMessageById = `-- name: GetMessageById :one
SELECT id, sender_id, room_id, contents, created_at FROM messages WHERE id = ?
`

func (q *Queries) GetMessageById(ctx context.Context, id uint64) (Message, error) {
	row := q.db.QueryRowContext(ctx, getMessageById, id)
	var i Message
	err := row.Scan(
		&i.ID,
		&i.SenderID,
		&i.RoomID,
		&i.Contents,
		&i.CreatedAt,
	)
	return i, err
}

const getMessagesByRoom = `-- name: GetMessagesByRoom :many
SELECT id, sender_id, room_id, contents, created_at FROM messages WHERE room_id = ?
`

func (q *Queries) GetMessagesByRoom(ctx context.Context, roomID uint64) ([]Message, error) {
	rows, err := q.db.QueryContext(ctx, getMessagesByRoom, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Message
	for rows.Next() {
		var i Message
		if err := rows.Scan(
			&i.ID,
			&i.SenderID,
			&i.RoomID,
			&i.Contents,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoomById = `-- name: GetRoomById :one
SELECT id, name, owner_id, type FROM rooms WHERE id = ?
`

func (q *Queries) GetRoomById(ctx context.Context, id uint64) (Room, error) {
	row := q.db.QueryRowContext(ctx, getRoomById, id)
	var i Room
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.OwnerID,
		&i.Type,
	)
	return i, err
}

const getRoomsByUser = `-- name: GetRoomsByUser :many
SELECT r.id, r.name, r.owner_id, r.type FROM rooms r
JOIN users_rooms ur ON ur.room_id = r.id
WHERE ur.user_id = ?
`

func (q *Queries) GetRoomsByUser(ctx context.Context, userID uint64) ([]Room, error) {
	rows, err := q.db.QueryContext(ctx, getRoomsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Room
	for rows.Next() {
		var i Room
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.OwnerID,
			&i.Type,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, created_at, password FROM users WHERE email = ? LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.Password,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, email, created_at, password FROM users WHERE id = ?
`

func (q *Queries) GetUserById(ctx context.Context, id uint64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
		&i.Password,
	)
	return i, err
}

const getUsersByRoom = `-- name: GetUsersByRoom :many
SELECT u.id, u.username, u.email, u.created_at, u.password FROM users u
JOIN users_rooms ur ON ur.user_id = u.id
WHERE ur.room_id = ?
`

func (q *Queries) GetUsersByRoom(ctx context.Context, roomID uint64) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsersByRoom, roomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.CreatedAt,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateInvite = `-- name: UpdateInvite :exec
UPDATE invites SET state = ? WHERE id = ?
`

type UpdateInviteParams struct {
	State InvitesState `json:"state"`
	ID    uint64       `json:"id"`
}

func (q *Queries) UpdateInvite(ctx context.Context, arg UpdateInviteParams) error {
	_, err := q.db.ExecContext(ctx, updateInvite, arg.State, arg.ID)
	return err
}

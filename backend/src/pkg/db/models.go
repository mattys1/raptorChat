// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type CallsStatus string

const (
	CallsStatusActive    CallsStatus = "active"
	CallsStatusCompleted CallsStatus = "completed"
	CallsStatusRejected  CallsStatus = "rejected"
)

func (e *CallsStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = CallsStatus(s)
	case string:
		*e = CallsStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for CallsStatus: %T", src)
	}
	return nil
}

type NullCallsStatus struct {
	CallsStatus CallsStatus `json:"calls_status"`
	Valid       bool        `json:"valid"` // Valid is true if CallsStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullCallsStatus) Scan(value interface{}) error {
	if value == nil {
		ns.CallsStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.CallsStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullCallsStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.CallsStatus), nil
}

type InvitesState string

const (
	InvitesStatePending  InvitesState = "pending"
	InvitesStateAccepted InvitesState = "accepted"
	InvitesStateDeclined InvitesState = "declined"
)

func (e *InvitesState) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = InvitesState(s)
	case string:
		*e = InvitesState(s)
	default:
		return fmt.Errorf("unsupported scan type for InvitesState: %T", src)
	}
	return nil
}

type NullInvitesState struct {
	InvitesState InvitesState `json:"invites_state"`
	Valid        bool         `json:"valid"` // Valid is true if InvitesState is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullInvitesState) Scan(value interface{}) error {
	if value == nil {
		ns.InvitesState, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.InvitesState.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullInvitesState) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.InvitesState), nil
}

type InvitesType string

const (
	InvitesTypeDirect InvitesType = "direct"
	InvitesTypeGroup  InvitesType = "group"
)

func (e *InvitesType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = InvitesType(s)
	case string:
		*e = InvitesType(s)
	default:
		return fmt.Errorf("unsupported scan type for InvitesType: %T", src)
	}
	return nil
}

type NullInvitesType struct {
	InvitesType InvitesType `json:"invites_type"`
	Valid       bool        `json:"valid"` // Valid is true if InvitesType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullInvitesType) Scan(value interface{}) error {
	if value == nil {
		ns.InvitesType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.InvitesType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullInvitesType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.InvitesType), nil
}

type RoomsType string

const (
	RoomsTypeDirect RoomsType = "direct"
	RoomsTypeGroup  RoomsType = "group"
)

func (e *RoomsType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RoomsType(s)
	case string:
		*e = RoomsType(s)
	default:
		return fmt.Errorf("unsupported scan type for RoomsType: %T", src)
	}
	return nil
}

type NullRoomsType struct {
	RoomsType RoomsType `json:"rooms_type"`
	Valid     bool      `json:"valid"` // Valid is true if RoomsType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRoomsType) Scan(value interface{}) error {
	if value == nil {
		ns.RoomsType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RoomsType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRoomsType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RoomsType), nil
}

type Call struct {
	ID               uint64      `json:"id"`
	RoomID           uint64      `json:"room_id"`
	Status           CallsStatus `json:"status"`
	CreatedAt        time.Time   `json:"created_at"`
	ParticipantCount uint32      `json:"participant_count"`
}

type CallParticipant struct {
	CallID   uint64    `json:"call_id"`
	UserID   uint64    `json:"user_id"`
	JoinedAt time.Time `json:"joined_at"`
}

type Friendship struct {
	ID        uint64       `json:"id"`
	FirstID   uint64       `json:"first_id"`
	SecondID  uint64       `json:"second_id"`
	DmID      uint64       `json:"dm_id"`
	CreatedAt sql.NullTime `json:"created_at"`
}

type Invite struct {
	ID         uint64       `json:"id"`
	Type       InvitesType  `json:"type"`
	State      InvitesState `json:"state"`
	RoomID     *uint64      `json:"room_id"`
	IssuerID   uint64       `json:"issuer_id"`
	ReceiverID uint64       `json:"receiver_id"`
}

type Message struct {
	ID        uint64       `json:"id"`
	SenderID  uint64       `json:"sender_id"`
	RoomID    uint64       `json:"room_id"`
	Contents  string       `json:"contents"`
	CreatedAt time.Time    `json:"created_at"`
	IsDeleted sql.NullBool `json:"is_deleted"`
	DeletedAt sql.NullTime `json:"deleted_at"`
}

type Permission struct {
	ID   uint64 `json:"id"`
	Name string `json:"name"`
}

type Role struct {
	ID   uint64 `json:"id"`
	Name string `json:"name"`
}

type RolesPermission struct {
	RoleID       uint64 `json:"role_id"`
	PermissionID uint64 `json:"permission_id"`
}

type Room struct {
	ID          uint64    `json:"id"`
	Name        *string   `json:"name"`
	OwnerID     *uint64   `json:"owner_id"`
	Type        RoomsType `json:"type"`
	MemberCount *int32    `json:"member_count"`
}

type RoomsUsersRole struct {
	RoomID uint64 `json:"room_id"`
	UserID uint64 `json:"user_id"`
	RoleID uint64 `json:"role_id"`
}

type User struct {
	ID        uint64    `json:"id"`
	Username  string    `json:"username"`
	Email     string    `json:"email"`
	CreatedAt time.Time `json:"created_at"`
	Password  string    `json:"password"`
	AvatarUrl string    `json:"avatar_url"`
}

type UsersRole struct {
	UserID uint64 `json:"user_id"`
	RoleID uint64 `json:"role_id"`
}

type UsersRoom struct {
	UserID uint64 `json:"user_id"`
	RoomID uint64 `json:"room_id"`
}
